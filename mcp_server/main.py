# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T12:12:28+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity, UnsuportedSecurityStub
from fastapi import Header, Path, Query

from models import (
    AppClient,
    AppClients,
    Asset,
    Assets,
    DataBundle,
    DataBundles,
    Dataset2,
    Datasets,
    DeploymentEnvironment,
    DeploymentEnvironments,
    Document,
    Documents,
    Empty,
    Error,
    Log,
    Logs,
    Model,
    Models,
    Organization,
    Organizations,
    PatchAppClientId,
    PatchAssetId,
    PatchDataBundleId,
    PatchDatasetId,
    PatchDocumentId,
    PatchModelId,
    PatchOrganizationId,
    PatchPaymentMethodId,
    PatchSecretId,
    PatchTrainingId,
    PatchTransistionExecutionId,
    PatchTransitionId,
    PatchUserId,
    PatchWorkflowExecutionId,
    PatchWorkflowId,
    PaymentMethod,
    PaymentMethods,
    Plan,
    Plans,
    PostAppClients,
    PostAssets,
    PostDataBundles,
    PostDatasets,
    PostDocuments,
    PostHeartbeats,
    PostModels,
    PostOrganizations,
    PostPaymentMethods,
    PostPredictions,
    PostSecrets,
    PostSignUp,
    PostTrainings,
    PostTransitionExecution,
    PostTransitions,
    PostUsers,
    PostWorkflowExecutions,
    PostWorkflows,
    Prediction,
    Predictions2,
    Profile,
    Secret,
    Secrets,
    SignUp,
    Training,
    Trainings,
    Transition,
    TransitionExecution,
    TransitionExecutions,
    Transitions,
    User,
    Users,
    Workflow,
    WorkflowExecution,
    WorkflowExecutions,
    Workflows,
)

app = MCPProxy(
    title='Lucidtech API',
    version='2023-03-01T16:45:37Z',
    servers=[
        {
            'url': 'https://api.lucidtech.ai/{basePath}',
            'variables': {'basePath': {'default': 'v1'}},
        }
    ],
)


@app.get(
    '/appClients',
    tags=['user_profile_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_app_clients(
    next_token: Optional[str] = Query(None, alias='nextToken'),
    max_results: Optional[str] = Query(None, alias='maxResults'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.options('/appClients', tags=['app_client_management'])
def options_app_clients(body: Empty):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/appClients',
    tags=['app_client_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def post_app_clients(
    content__type: str = Header(..., alias='Content-Type'), body: PostAppClients = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete('/appClients/{appClientId}', tags=['app_client_management'])
def delete_app_clients__app_client_id(
    app_client_id: str = Path(..., alias='appClientId')
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.options('/appClients/{appClientId}', tags=['app_client_management'])
def options_app_clients__app_client_id(
    app_client_id: str = Path(..., alias='appClientId'), body: Empty = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/appClients/{appClientId}',
    tags=['app_client_management', 'workflow_handling', 'workflow_execution_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def patch_app_clients__app_client_id(
    app_client_id: str = Path(..., alias='appClientId'),
    content__type: str = Header(..., alias='Content-Type'),
    body: PatchAppClientId = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/assets',
    tags=['dataset_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_assets(
    next_token: Optional[str] = Query(None, alias='nextToken'),
    max_results: Optional[str] = Query(None, alias='maxResults'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.options('/assets', tags=['environment_management'])
def options_assets(body: Empty):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/assets',
    tags=['asset_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def post_assets(
    content__type: str = Header(..., alias='Content-Type'), body: PostAssets = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/assets/{assetId}',
    tags=['asset_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_assets__asset_id(asset_id: str = Path(..., alias='assetId')):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/assets/{assetId}',
    tags=['asset_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_assets__asset_id(asset_id: str = Path(..., alias='assetId')):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.options('/assets/{assetId}', tags=['asset_handling'])
def options_assets__asset_id(
    asset_id: str = Path(..., alias='assetId'), body: Empty = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/assets/{assetId}',
    tags=['asset_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def patch_assets__asset_id(
    content__type: str = Header(..., alias='Content-Type'),
    asset_id: str = Path(..., alias='assetId'),
    body: PatchAssetId = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/datasets',
    tags=['user_data_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_datasets(
    next_token: Optional[str] = Query(None, alias='nextToken'),
    max_results: Optional[str] = Query(None, alias='maxResults'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.options('/datasets', tags=['user_data_management'])
def options_datasets(body: Empty):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/datasets',
    tags=['dataset_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def post_datasets(
    content__type: str = Header(..., alias='Content-Type'), body: PostDatasets = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/datasets/{datasetId}',
    tags=['dataset_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_datasets__dataset_id(dataset_id: str = Path(..., alias='datasetId')):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/datasets/{datasetId}',
    tags=['dataset_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_datasets__dataset_id(dataset_id: str = Path(..., alias='datasetId')):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.options('/datasets/{datasetId}', tags=['dataset_handling'])
def options_datasets__dataset_id(
    dataset_id: str = Path(..., alias='datasetId'), body: Empty = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/datasets/{datasetId}',
    tags=['dataset_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def patch_datasets__dataset_id(
    content__type: str = Header(..., alias='Content-Type'),
    dataset_id: str = Path(..., alias='datasetId'),
    body: PatchDatasetId = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/deploymentEnvironments',
    tags=['app_client_management', 'dataset_handling', 'user_profile_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_deployment_environments(
    owner: Optional[str] = None,
    next_token: Optional[str] = Query(None, alias='nextToken'),
    max_results: Optional[str] = Query(None, alias='maxResults'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.options(
    '/deploymentEnvironments', tags=['app_client_management', 'user_profile_handling']
)
def options_deployment_environments(body: Empty):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/deploymentEnvironments/{deploymentEnvironmentId}',
    tags=['environment_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_deployment_environments__deployment_environment_id(
    deployment_environment_id: str = Path(..., alias='deploymentEnvironmentId')
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.options(
    '/deploymentEnvironments/{deploymentEnvironmentId}', tags=['environment_management']
)
def options_deployment_environments__deployment_environment_id(
    deployment_environment_id: str = Path(..., alias='deploymentEnvironmentId'),
    body: Empty = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/documents',
    tags=['dataset_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_documents(
    consent_id: Optional[str] = Query(None, alias='consentId'),
    dataset_id: Optional[str] = Query(None, alias='datasetId'),
    next_token: Optional[str] = Query(None, alias='nextToken'),
    max_results: Optional[str] = Query(None, alias='maxResults'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/documents',
    tags=['dataset_handling', 'document_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_documents(
    dataset_id: Optional[str] = Query(None, alias='datasetId'),
    next_token: Optional[str] = Query(None, alias='nextToken'),
    order: Optional[str] = None,
    document_id: Optional[str] = Query(None, alias='documentId'),
    consent_id: Optional[str] = Query(None, alias='consentId'),
    max_results: Optional[str] = Query(None, alias='maxResults'),
    sort_by: Optional[str] = Query(None, alias='sortBy'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.options('/documents', tags=['app_client_management'])
def options_documents(body: Empty):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/documents',
    tags=['document_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def post_documents(
    content__type: str = Header(..., alias='Content-Type'), body: PostDocuments = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/documents/{documentId}',
    tags=['document_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_documents__document_id(document_id: str = Path(..., alias='documentId')):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/documents/{documentId}',
    tags=['document_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_documents__document_id(document_id: str = Path(..., alias='documentId')):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.options('/documents/{documentId}', tags=['document_handling'])
def options_documents__document_id(
    document_id: str = Path(..., alias='documentId'), body: Empty = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/documents/{documentId}',
    tags=['document_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def patch_documents__document_id(
    content__type: str = Header(..., alias='Content-Type'),
    document_id: str = Path(..., alias='documentId'),
    body: PatchDocumentId = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/logs',
    tags=['workflow_handling', 'workflow_execution_handling', 'transition_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_logs(
    workflow_id: Optional[str] = Query(None, alias='workflowId'),
    next_token: Optional[str] = Query(None, alias='nextToken'),
    order: Optional[str] = None,
    transition_execution_id: Optional[str] = Query(None, alias='transitionExecutionId'),
    transition_id: Optional[str] = Query(None, alias='transitionId'),
    max_results: Optional[str] = Query(None, alias='maxResults'),
    workflow_execution_id: Optional[str] = Query(None, alias='workflowExecutionId'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.options('/logs', tags=['app_client_management'])
def options_logs(body: Empty):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/logs/{logId}',
    tags=['log_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_logs__log_id(log_id: str = Path(..., alias='logId')):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.options('/logs/{logId}', tags=['log_handling'])
def options_logs__log_id(log_id: str = Path(..., alias='logId'), body: Empty = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/models',
    tags=['user_profile_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_models(
    owner: Optional[str] = None,
    next_token: Optional[str] = Query(None, alias='nextToken'),
    max_results: Optional[str] = Query(None, alias='maxResults'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.options('/models', tags=['app_client_management'])
def options_models(body: Empty):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/models',
    tags=['model_handling', 'dataset_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def post_models(
    content__type: str = Header(..., alias='Content-Type'), body: PostModels = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/models/{modelId}',
    tags=['model_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_models__model_id(model_id: str = Path(..., alias='modelId')):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/models/{modelId}',
    tags=['model_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_models__model_id(model_id: str = Path(..., alias='modelId')):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.options('/models/{modelId}', tags=['model_handling'])
def options_models__model_id(
    model_id: str = Path(..., alias='modelId'), body: Empty = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/models/{modelId}',
    tags=['model_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def patch_models__model_id(
    content__type: str = Header(..., alias='Content-Type'),
    model_id: str = Path(..., alias='modelId'),
    body: PatchModelId = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/models/{modelId}/dataBundles',
    tags=['model_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_models__model_id_data_bundles(
    model_id: str = Path(..., alias='modelId'),
    status: Optional[str] = None,
    next_token: Optional[str] = Query(None, alias='nextToken'),
    max_results: Optional[str] = Query(None, alias='maxResults'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.options('/models/{modelId}/dataBundles', tags=['model_handling'])
def options_models__model_id_data_bundles(
    model_id: str = Path(..., alias='modelId'), body: Empty = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/models/{modelId}/dataBundles',
    tags=['model_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def post_models__model_id_data_bundles(
    content__type: str = Header(..., alias='Content-Type'),
    model_id: str = Path(..., alias='modelId'),
    body: PostDataBundles = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/models/{modelId}/dataBundles/{dataBundleId}',
    tags=['model_handling', 'dataset_handling'],
)
def delete_models__model_id_data_bundles__data_bundle_id(
    data_bundle_id: str = Path(..., alias='dataBundleId'),
    model_id: str = Path(..., alias='modelId'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.options('/models/{modelId}/dataBundles/{dataBundleId}', tags=['model_handling'])
def options_models__model_id_data_bundles__data_bundle_id(
    data_bundle_id: str = Path(..., alias='dataBundleId'),
    model_id: str = Path(..., alias='modelId'),
    body: Empty = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/models/{modelId}/dataBundles/{dataBundleId}',
    tags=['model_handling', 'dataset_handling', 'asset_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def patch_models__model_id_data_bundles__data_bundle_id(
    data_bundle_id: str = Path(..., alias='dataBundleId'),
    content__type: str = Header(..., alias='Content-Type'),
    model_id: str = Path(..., alias='modelId'),
    body: PatchDataBundleId = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/models/{modelId}/trainings',
    tags=['model_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_models__model_id_trainings(
    model_id: str = Path(..., alias='modelId'),
    status: Optional[str] = None,
    next_token: Optional[str] = Query(None, alias='nextToken'),
    max_results: Optional[str] = Query(None, alias='maxResults'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.options('/models/{modelId}/trainings', tags=['model_handling'])
def options_models__model_id_trainings(
    model_id: str = Path(..., alias='modelId'), body: Empty = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/models/{modelId}/trainings',
    tags=['model_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def post_models__model_id_trainings(
    content__type: str = Header(..., alias='Content-Type'),
    model_id: str = Path(..., alias='modelId'),
    body: PostTrainings = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.options('/models/{modelId}/trainings/{trainingId}', tags=['model_handling'])
def options_models__model_id_trainings__training_id(
    model_id: str = Path(..., alias='modelId'),
    training_id: str = Path(..., alias='trainingId'),
    body: Empty = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/models/{modelId}/trainings/{trainingId}',
    tags=[
        'model_handling',
        'transition_handling',
        'workflow_handling',
        'workflow_execution_handling',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def patch_models__model_id_trainings__training_id(
    content__type: str = Header(..., alias='Content-Type'),
    model_id: str = Path(..., alias='modelId'),
    training_id: str = Path(..., alias='trainingId'),
    body: PatchTrainingId = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/organizations',
    tags=['workflow_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_organizations(
    next_token: Optional[str] = Query(None, alias='nextToken'),
    max_results: Optional[str] = Query(None, alias='maxResults'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.options('/organizations', tags=['signup_handling'])
def options_organizations(body: Empty):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/organizations',
    tags=['organization_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def post_organizations(
    content__type: str = Header(..., alias='Content-Type'),
    body: PostOrganizations = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/organizations/{organizationId}',
    tags=['organization_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_organizations__organization_id(
    organization_id: str = Path(..., alias='organizationId')
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.options('/organizations/{organizationId}', tags=['organization_handling'])
def options_organizations__organization_id(
    organization_id: str = Path(..., alias='organizationId'), body: Empty = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/organizations/{organizationId}',
    tags=['organization_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def patch_organizations__organization_id(
    content__type: str = Header(..., alias='Content-Type'),
    organization_id: str = Path(..., alias='organizationId'),
    body: PatchOrganizationId = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/paymentMethods',
    tags=['dataset_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_payment_methods(
    next_token: Optional[str] = Query(None, alias='nextToken'),
    max_results: Optional[str] = Query(None, alias='maxResults'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.options(
    '/paymentMethods',
    tags=[
        'app_client_management',
        'asset_handling',
        'dataset_handling',
        'environment_management',
        'document_handling',
        'log_handling',
        'model_handling',
        'organization_handling',
        'payment_method_handling',
        'plan_handling',
        'prediction_handling',
        'user_profile_handling',
        'secret_handling',
        'signup_handling',
        'transition_handling',
        'user_data_management',
        'workflow_handling',
        'workflow_execution_handling',
    ],
)
def options_payment_methods(body: Empty):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/paymentMethods',
    tags=['payment_method_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def post_payment_methods(
    content__type: str = Header(..., alias='Content-Type'),
    body: PostPaymentMethods = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/paymentMethods/{paymentMethodId}',
    tags=['payment_method_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_payment_methods__payment_method_id(
    payment_method_id: str = Path(..., alias='paymentMethodId')
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/paymentMethods/{paymentMethodId}',
    tags=['payment_method_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_payment_methods__payment_method_id(
    payment_method_id: str = Path(..., alias='paymentMethodId')
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.options('/paymentMethods/{paymentMethodId}', tags=['payment_method_handling'])
def options_payment_methods__payment_method_id(
    payment_method_id: str = Path(..., alias='paymentMethodId'), body: Empty = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/paymentMethods/{paymentMethodId}',
    tags=['payment_method_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def patch_payment_methods__payment_method_id(
    content__type: str = Header(..., alias='Content-Type'),
    payment_method_id: str = Path(..., alias='paymentMethodId'),
    body: PatchPaymentMethodId = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/plans',
    tags=['user_data_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_plans(
    owner: Optional[str] = None,
    next_token: Optional[str] = Query(None, alias='nextToken'),
    max_results: Optional[str] = Query(None, alias='maxResults'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.options('/plans', tags=['environment_management'])
def options_plans(body: Empty):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/plans/{planId}',
    tags=['plan_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_plans__plan_id(plan_id: str = Path(..., alias='planId')):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.options('/plans/{planId}', tags=['plan_handling'])
def options_plans__plan_id(plan_id: str = Path(..., alias='planId'), body: Empty = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/predictions',
    tags=['dataset_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_predictions(
    next_token: Optional[str] = Query(None, alias='nextToken'),
    max_results: Optional[str] = Query(None, alias='maxResults'),
    sort_by: Optional[str] = Query(None, alias='sortBy'),
    order: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.options(
    '/predictions',
    tags=['app_client_management', 'user_profile_handling', 'signup_handling'],
)
def options_predictions(body: Empty):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/predictions',
    tags=['prediction_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def post_predictions(
    content__type: str = Header(..., alias='Content-Type'), body: PostPredictions = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/profiles/{profileId}',
    tags=['user_profile_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_profiles__profile_id(profile_id: str = Path(..., alias='profileId')):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.options('/profiles/{profileId}', tags=['user_profile_handling'])
def options_profiles__profile_id(
    profile_id: str = Path(..., alias='profileId'), body: Empty = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/profiles/{profileId}',
    tags=['user_profile_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def patch_profiles__profile_id(profile_id: str = Path(..., alias='profileId')):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/secrets',
    tags=['user_data_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_secrets(
    next_token: Optional[str] = Query(None, alias='nextToken'),
    max_results: Optional[str] = Query(None, alias='maxResults'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.options('/secrets', tags=['app_client_management'])
def options_secrets(body: Empty):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/secrets',
    tags=['secret_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def post_secrets(
    content__type: str = Header(..., alias='Content-Type'), body: PostSecrets = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete('/secrets/{secretId}', tags=['secret_handling'])
def delete_secrets__secret_id(secret_id: str = Path(..., alias='secretId')):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.options('/secrets/{secretId}', tags=['secret_handling'])
def options_secrets__secret_id(
    secret_id: str = Path(..., alias='secretId'), body: Empty = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/secrets/{secretId}',
    tags=['secret_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def patch_secrets__secret_id(
    content__type: str = Header(..., alias='Content-Type'),
    secret_id: str = Path(..., alias='secretId'),
    body: PatchSecretId = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.options(
    '/signup',
    tags=[
        'app_client_management',
        'asset_handling',
        'dataset_handling',
        'environment_management',
        'document_handling',
        'log_handling',
        'model_handling',
        'organization_handling',
        'payment_method_handling',
        'plan_handling',
        'prediction_handling',
        'user_profile_handling',
        'secret_handling',
        'signup_handling',
        'transition_handling',
        'user_data_management',
        'workflow_handling',
        'workflow_execution_handling',
    ],
)
def options_signup(body: Empty):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/signup', tags=['signup_handling', 'user_data_management'])
def post_signup(
    content__type: str = Header(..., alias='Content-Type'), body: PostSignUp = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/transitions',
    tags=['transition_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_transitions(
    transition_type: Optional[str] = Query(None, alias='transitionType'),
    next_token: Optional[str] = Query(None, alias='nextToken'),
    max_results: Optional[str] = Query(None, alias='maxResults'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.options('/transitions', tags=['environment_management'])
def options_transitions(body: Empty):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/transitions',
    tags=['transition_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def post_transitions(
    content__type: str = Header(..., alias='Content-Type'), body: PostTransitions = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/transitions/{transitionId}',
    tags=['transition_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_transitions__transition_id(
    transition_id: str = Path(..., alias='transitionId')
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/transitions/{transitionId}',
    tags=['transition_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_transitions__transition_id(
    transition_id: str = Path(..., alias='transitionId')
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.options('/transitions/{transitionId}', tags=['transition_handling'])
def options_transitions__transition_id(
    transition_id: str = Path(..., alias='transitionId'), body: Empty = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/transitions/{transitionId}',
    tags=['transition_handling', 'workflow_execution_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def patch_transitions__transition_id(
    content__type: str = Header(..., alias='Content-Type'),
    transition_id: str = Path(..., alias='transitionId'),
    body: PatchTransitionId = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/transitions/{transitionId}/executions',
    tags=['transition_handling', 'workflow_execution_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_transitions__transition_id_executions(
    next_token: Optional[str] = Query(None, alias='nextToken'),
    order: Optional[str] = None,
    execution_id: Optional[str] = Query(None, alias='executionId'),
    transition_id: str = Path(..., alias='transitionId'),
    status: Optional[str] = None,
    max_results: Optional[str] = Query(None, alias='maxResults'),
    sort_by: Optional[str] = Query(None, alias='sortBy'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.options('/transitions/{transitionId}/executions', tags=['transition_handling'])
def options_transitions__transition_id_executions(
    transition_id: str = Path(..., alias='transitionId'), body: Empty = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/transitions/{transitionId}/executions',
    tags=['transition_handling', 'workflow_execution_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def post_transitions__transition_id_executions(
    content__type: str = Header(..., alias='Content-Type'),
    transition_id: str = Path(..., alias='transitionId'),
    body: PostTransitionExecution = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/transitions/{transitionId}/executions/{executionId}',
    tags=['transition_handling', 'workflow_execution_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_transitions__transition_id_executions__execution_id(
    transition_id: str = Path(..., alias='transitionId'),
    execution_id: str = Path(..., alias='executionId'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.options(
    '/transitions/{transitionId}/executions/{executionId}',
    tags=['transition_handling', 'workflow_execution_handling'],
)
def options_transitions__transition_id_executions__execution_id(
    transition_id: str = Path(..., alias='transitionId'),
    execution_id: str = Path(..., alias='executionId'),
    body: Empty = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/transitions/{transitionId}/executions/{executionId}',
    tags=['transition_handling', 'workflow_execution_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def patch_transitions__transition_id_executions__execution_id(
    content__type: str = Header(..., alias='Content-Type'),
    transition_id: str = Path(..., alias='transitionId'),
    execution_id: str = Path(..., alias='executionId'),
    body: PatchTransistionExecutionId = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.options(
    '/transitions/{transitionId}/executions/{executionId}/heartbeats',
    tags=['transition_handling', 'workflow_execution_handling'],
)
def manage_transition_execution_heartbeats(
    transition_id: str = Path(..., alias='transitionId'),
    execution_id: str = Path(..., alias='executionId'),
    body: Empty = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/transitions/{transitionId}/executions/{executionId}/heartbeats',
    tags=['transition_handling', 'workflow_execution_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def post_transition_execution_heartbeats(
    content__type: str = Header(..., alias='Content-Type'),
    transition_id: str = Path(..., alias='transitionId'),
    execution_id: str = Path(..., alias='executionId'),
    body: PostHeartbeats = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users',
    tags=['dataset_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_users(
    next_token: Optional[str] = Query(None, alias='nextToken'),
    max_results: Optional[str] = Query(None, alias='maxResults'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.options('/users', tags=['organization_handling'])
def options_users(body: Empty):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/users',
    tags=['user_data_management', 'user_profile_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def post_users(
    content__type: str = Header(..., alias='Content-Type'), body: PostUsers = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/users/{userId}',
    tags=['user_profile_handling', 'user_data_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_users__user_id(user_id: str = Path(..., alias='userId')):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users/{userId}',
    tags=['user_profile_handling', 'user_data_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_users__user_id(user_id: str = Path(..., alias='userId')):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.options('/users/{userId}', tags=['user_profile_handling', 'user_data_management'])
def options_users__user_id(user_id: str = Path(..., alias='userId'), body: Empty = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/users/{userId}',
    tags=['user_data_management', 'user_profile_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def patch_users__user_id(
    content__type: str = Header(..., alias='Content-Type'),
    user_id: str = Path(..., alias='userId'),
    body: PatchUserId = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/workflows',
    tags=['dataset_handling', 'user_data_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_workflows(
    next_token: Optional[str] = Query(None, alias='nextToken'),
    max_results: Optional[str] = Query(None, alias='maxResults'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.options('/workflows', tags=['user_data_management'])
def options_workflows(body: Empty):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/workflows',
    tags=['workflow_handling', 'workflow_execution_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def post_workflows(
    content__type: str = Header(..., alias='Content-Type'), body: PostWorkflows = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/workflows/{workflowId}',
    tags=['workflow_handling', 'workflow_execution_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_workflows__workflow_id(workflow_id: str = Path(..., alias='workflowId')):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/workflows/{workflowId}',
    tags=['workflow_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_workflows__workflow_id(workflow_id: str = Path(..., alias='workflowId')):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.options('/workflows/{workflowId}', tags=['workflow_handling'])
def options_workflows__workflow_id(
    workflow_id: str = Path(..., alias='workflowId'), body: Empty = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/workflows/{workflowId}',
    tags=['workflow_handling', 'workflow_execution_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def patch_workflows__workflow_id(
    content__type: str = Header(..., alias='Content-Type'),
    workflow_id: str = Path(..., alias='workflowId'),
    body: PatchWorkflowId = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/workflows/{workflowId}/executions',
    tags=['workflow_handling', 'workflow_execution_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_workflows__workflow_id_executions(
    from_start_time: Optional[str] = Query(None, alias='fromStartTime'),
    to_start_time: Optional[str] = Query(None, alias='toStartTime'),
    workflow_id: str = Path(..., alias='workflowId'),
    next_token: Optional[str] = Query(None, alias='nextToken'),
    order: Optional[str] = None,
    status: Optional[str] = None,
    max_results: Optional[str] = Query(None, alias='maxResults'),
    sort_by: Optional[str] = Query(None, alias='sortBy'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.options(
    '/workflows/{workflowId}/executions',
    tags=['workflow_handling', 'workflow_execution_handling'],
)
def options_workflows__workflow_id_executions(
    workflow_id: str = Path(..., alias='workflowId'), body: Empty = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/workflows/{workflowId}/executions',
    tags=['workflow_handling', 'workflow_execution_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def post_workflows__workflow_id_executions(
    content__type: str = Header(..., alias='Content-Type'),
    workflow_id: str = Path(..., alias='workflowId'),
    body: PostWorkflowExecutions = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/workflows/{workflowId}/executions/{executionId}',
    tags=['workflow_execution_handling', 'workflow_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_workflows__workflow_id_executions__execution_id(
    execution_id: str = Path(..., alias='executionId'),
    workflow_id: str = Path(..., alias='workflowId'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/workflows/{workflowId}/executions/{executionId}',
    tags=['workflow_handling', 'workflow_execution_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_workflows__workflow_id_executions__execution_id(
    execution_id: str = Path(..., alias='executionId'),
    workflow_id: str = Path(..., alias='workflowId'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.options(
    '/workflows/{workflowId}/executions/{executionId}',
    tags=['workflow_handling', 'workflow_execution_handling'],
)
def options_workflows__workflow_id_executions__execution_id(
    execution_id: str = Path(..., alias='executionId'),
    workflow_id: str = Path(..., alias='workflowId'),
    body: Empty = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/workflows/{workflowId}/executions/{executionId}',
    tags=['workflow_execution_handling', 'workflow_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def patch_workflows__workflow_id_executions__execution_id(
    content__type: str = Header(..., alias='Content-Type'),
    execution_id: str = Path(..., alias='executionId'),
    workflow_id: str = Path(..., alias='workflowId'),
    body: PatchWorkflowExecutionId = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
