# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T12:12:28+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, ConfigDict, Field, RootModel, confloat, conint, constr


class AppClient(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    appClientId: constr(pattern=r'^las:app-client:[a-z0-9-_]+$')
    callbackUrls: List[constr(pattern=r'^http://localhost.*|^https://.*')]
    clientId: str
    clientSecret: Optional[str] = None
    createdBy: constr(max_length=4096)
    createdTime: constr(
        pattern=r'^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$'
    )
    defaultLoginUrl: constr(pattern=r'^http://localhost.*|^https://.*')
    description: constr(max_length=4096)
    hasSecret: bool
    loginUrls: List[constr(pattern=r'^http://localhost.*|^https://.*')]
    logoutUrls: List[constr(pattern=r'^http://localhost.*|^https://.*')]
    name: constr(max_length=4096)
    updatedBy: constr(max_length=4096)
    updatedTime: constr(
        pattern=r'^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$'
    )


class AppClients(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    appClients: List[AppClient]
    nextToken: constr(max_length=4096)


class Asset(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    assetId: constr(pattern=r'^las:asset:[a-f0-9]{32}$')
    content: Optional[constr(min_length=1)] = None
    contentMD5: constr(max_length=4096)
    createdBy: constr(max_length=4096)
    createdTime: constr(
        pattern=r'^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$'
    )
    description: constr(max_length=4096)
    name: constr(max_length=4096)
    updatedBy: constr(max_length=4096)
    updatedTime: constr(
        pattern=r'^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$'
    )


class Assets(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    assets: List[Asset]
    nextToken: constr(max_length=4096)


class StorageLocation(Enum):
    EU = 'EU'


class Dataset(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    containsPersonallyIdentifiableInformation: bool
    createdBy: Optional[constr(max_length=4096)] = None
    createdTime: Optional[
        constr(
            pattern=r'^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$'
        )
    ] = None
    datasetId: constr(pattern=r'^las:dataset:[a-f0-9]{32}$')
    description: constr(max_length=4096)
    groundTruthSummary: Optional[Dict[str, Any]] = None
    metadata: Optional[Dict[str, Any]] = None
    name: Optional[constr(max_length=4096)] = None
    numberOfDocuments: conint(ge=0)
    retentionInDays: conint(ge=0, le=1825)
    storageLocation: StorageLocation
    updatedBy: Optional[constr(max_length=4096)] = None
    updatedTime: Optional[
        constr(
            pattern=r'^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$'
        )
    ] = None
    version: conint(ge=0)


class Status(Enum):
    running = 'running'
    succeeded = 'succeeded'
    failed = 'failed'


class DataBundle(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    createdBy: constr(max_length=4096)
    createdTime: constr(
        pattern=r'^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$'
    )
    dataBundleId: constr(pattern=r'^las:model-data-bundle:[a-f0-9]{32}$')
    datasets: List[Dataset]
    description: constr(max_length=4096)
    modelId: constr(pattern=r'^las:model:[a-z0-9-_]+$')
    name: constr(max_length=4096)
    retentionInDays: Optional[conint(ge=1)] = None
    status: Status
    summary: Dict[str, Any]
    updatedBy: constr(max_length=4096)
    updatedTime: constr(
        pattern=r'^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$'
    )


class Dataset1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    containsPersonallyIdentifiableInformation: bool
    createdBy: Optional[constr(max_length=4096)] = None
    createdTime: Optional[
        constr(
            pattern=r'^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$'
        )
    ] = None
    datasetId: constr(pattern=r'^las:dataset:[a-f0-9]{32}$')
    description: constr(max_length=4096)
    groundTruthSummary: Optional[Dict[str, Any]] = None
    metadata: Optional[Dict[str, Any]] = None
    name: Optional[constr(max_length=4096)] = None
    numberOfDocuments: conint(ge=0)
    retentionInDays: conint(ge=0, le=1825)
    storageLocation: StorageLocation
    updatedBy: Optional[constr(max_length=4096)] = None
    updatedTime: Optional[
        constr(
            pattern=r'^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$'
        )
    ] = None
    version: conint(ge=0)


class DataBundle1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    createdBy: constr(max_length=4096)
    createdTime: constr(
        pattern=r'^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$'
    )
    dataBundleId: constr(pattern=r'^las:model-data-bundle:[a-f0-9]{32}$')
    datasets: List[Dataset1]
    description: constr(max_length=4096)
    modelId: constr(pattern=r'^las:model:[a-z0-9-_]+$')
    name: constr(max_length=4096)
    retentionInDays: Optional[conint(ge=1)] = None
    status: Status
    summary: Dict[str, Any]
    updatedBy: constr(max_length=4096)
    updatedTime: constr(
        pattern=r'^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$'
    )


class StatusEnum(Enum):
    running = 'running'
    succeeded = 'succeeded'
    failed = 'failed'


class DataBundles(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    dataBundles: List[DataBundle1]
    nextToken: constr(max_length=4096)
    status: Optional[List[StatusEnum]] = None


class Dataset2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    containsPersonallyIdentifiableInformation: bool
    createdBy: constr(max_length=4096)
    createdTime: constr(
        pattern=r'^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$'
    )
    datasetId: constr(pattern=r'^las:dataset:[a-f0-9]{32}$')
    description: constr(max_length=4096)
    groundTruthSummary: Dict[str, Any]
    metadata: Dict[str, Any]
    name: Optional[constr(max_length=4096)] = None
    numberOfDocuments: conint(ge=0)
    retentionInDays: conint(ge=0, le=1825)
    storageLocation: StorageLocation
    updatedBy: constr(max_length=4096)
    updatedTime: constr(
        pattern=r'^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$'
    )
    version: conint(ge=0)


class Dataset3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    containsPersonallyIdentifiableInformation: bool
    createdBy: constr(max_length=4096)
    createdTime: constr(
        pattern=r'^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$'
    )
    datasetId: constr(pattern=r'^las:dataset:[a-f0-9]{32}$')
    description: constr(max_length=4096)
    groundTruthSummary: Dict[str, Any]
    metadata: Dict[str, Any]
    name: Optional[constr(max_length=4096)] = None
    numberOfDocuments: conint(ge=0)
    retentionInDays: conint(ge=0, le=1825)
    storageLocation: StorageLocation
    updatedBy: constr(max_length=4096)
    updatedTime: constr(
        pattern=r'^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$'
    )
    version: conint(ge=0)


class Datasets(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    datasets: List[Dataset3]
    nextToken: constr(max_length=4096)


class Status2(Enum):
    available = 'available'
    unavailable = 'unavailable'


class DeploymentEnvironment(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    deploymentEnvironmentId: constr(
        pattern=r'^las:deployment-environment:[a-z0-9-_]+(|:@[a-z0-9-_]+|:[0-9]+)$'
    )
    description: constr(max_length=4096)
    modelDeploymentUnits: conint(ge=0)
    name: constr(max_length=4096)
    organizationId: constr(pattern=r'^las:organization:[a-z0-9-_]+$')
    status: Status2


class DeploymentEnvironment1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    deploymentEnvironmentId: constr(
        pattern=r'^las:deployment-environment:[a-z0-9-_]+(|:@[a-z0-9-_]+|:[0-9]+)$'
    )
    description: constr(max_length=4096)
    modelDeploymentUnits: conint(ge=0)
    name: constr(max_length=4096)
    organizationId: constr(pattern=r'^las:organization:[a-z0-9-_]+$')
    status: Status2


class DeploymentEnvironments(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    deploymentEnvironments: List[DeploymentEnvironment1]
    nextToken: constr(max_length=4096)


class ContentType(Enum):
    application_pdf = 'application/pdf'
    image_jpeg = 'image/jpeg'
    image_png = 'image/png'
    image_tiff = 'image/tiff'


class Order(Enum):
    ascending = 'ascending'
    descending = 'descending'


class SortBy(Enum):
    createdTime = 'createdTime'


class Empty(BaseModel):
    pass


class Error(BaseModel):
    message: Optional[str] = None


class Log(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    events: Optional[List[Dict[str, Any]]] = None
    logId: constr(pattern=r'^las:log:[a-f0-9]{32}$')
    startTime: constr(
        pattern=r'^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$'
    )
    transitionExecutionId: constr(pattern=r'^las:transition-execution:[a-f0-9]{32}$')
    transitionId: Union[
        constr(pattern=r'^las:transition:[a-f0-9]{32}$'),
        constr(pattern=r'^las:transition:commons-[0-9A-Za-z-]+$'),
    ]
    workflowExecutionId: constr(pattern=r'^las:workflow-execution:[a-f0-9]{32}$')
    workflowId: constr(pattern=r'^las:workflow:[a-f0-9]{32}$')


class Logs(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    logs: List[Log]
    nextToken: constr(max_length=4096)
    order: Optional[Order] = None
    transitionExecutionId: Optional[
        constr(pattern=r'^las:transition-execution:[a-f0-9]{32}$')
    ] = None
    transitionId: Optional[
        Union[
            constr(pattern=r'^las:transition:[a-f0-9]{32}$'),
            constr(pattern=r'^las:transition:commons-[0-9A-Za-z-]+$'),
        ]
    ] = None
    workflowExecutionId: Optional[
        constr(pattern=r'^las:workflow-execution:[a-f0-9]{32}$')
    ] = None
    workflowId: Optional[constr(pattern=r'^las:workflow:[a-f0-9]{32}$')] = None


class EnumItem(
    RootModel[
        constr(
            pattern=r'^[0-9A-Za-zÆØÅæøå!"#$%&()*+,\-./:;<=>?@\[\]\^_`{|}~ ]+$',
            min_length=1,
            max_length=512,
        )
    ]
):
    root: constr(
        pattern=r'^[0-9A-Za-zÆØÅæøå!"#$%&()*+,\-./:;<=>?@\[\]\^_`{|}~ ]+$',
        min_length=1,
        max_length=512,
    )


class Type(Enum):
    amount = 'amount'
    date = 'date'
    digits = 'digits'
    enum = 'enum'
    numeric = 'numeric'
    string = 'string'


class FieldConfig(BaseModel):
    description: Optional[constr(max_length=4096)] = None
    enum: Optional[List[EnumItem]] = Field(None, max_length=500, min_length=1)
    maxLength: Optional[conint(ge=1, le=512)] = None
    type: Type


class Fields(BaseModel):
    description: Optional[constr(max_length=4096)] = None
    enum: Optional[List[EnumItem]] = Field(None, max_length=500, min_length=1)
    maxLength: Optional[conint(ge=1, le=512)] = None
    type: Type


class Type2(Enum):
    lines = 'lines'


class FieldConfig1(BaseModel):
    fields: Dict[str, Fields]
    type: Type2


class Strategy(Enum):
    BEST_FIRST = 'BEST_FIRST'


class PostprocessConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    strategy: Strategy


class Parameters(BaseModel):
    collapse: Optional[bool] = None
    n: conint(ge=1, le=3)


class Strategy1(Enum):
    BEST_N_PAGES = 'BEST_N_PAGES'


class PostprocessConfig1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    parameters: Parameters
    strategy: Strategy1


class ImageQuality(Enum):
    LOW = 'LOW'
    HIGH = 'HIGH'


class PreprocessConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    autoRotate: bool
    imageQuality: ImageQuality
    maxPages: conint(ge=1, le=3)


class Status4(Enum):
    active = 'active'
    inactive = 'inactive'


class Model(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    createdBy: constr(max_length=4096)
    createdTime: constr(
        pattern=r'^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$'
    )
    description: constr(max_length=4096)
    fieldConfig: Dict[str, Union[FieldConfig, FieldConfig1]]
    height: conint(ge=97, le=1921)
    metadata: Dict[str, Any]
    modelId: constr(pattern=r'^las:model:[a-z0-9-_]+$')
    name: constr(max_length=4096)
    numberOfDataBundles: conint(ge=0)
    numberOfRunningTrainings: conint(ge=0)
    organizationId: constr(pattern=r'^las:organization:[a-z0-9-_]+$')
    postprocessConfig: Optional[Union[PostprocessConfig, PostprocessConfig1]] = None
    preprocessConfig: PreprocessConfig
    status: Status4
    trainingId: constr(pattern=r'^las:model-training:[a-f0-9]{32}$')
    updatedBy: constr(max_length=4096)
    updatedTime: constr(
        pattern=r'^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$'
    )
    width: conint(ge=97, le=1921)


class Type3(Enum):
    amount = 'amount'
    date = 'date'
    digits = 'digits'
    enum = 'enum'
    numeric = 'numeric'
    string = 'string'


class FieldConfig2(BaseModel):
    description: Optional[constr(max_length=4096)] = None
    enum: Optional[List[EnumItem]] = Field(None, max_length=500, min_length=1)
    maxLength: Optional[conint(ge=1, le=512)] = None
    type: Type3


class Fields1(BaseModel):
    description: Optional[constr(max_length=4096)] = None
    enum: Optional[List[EnumItem]] = Field(None, max_length=500, min_length=1)
    maxLength: Optional[conint(ge=1, le=512)] = None
    type: Type3


class Type5(Enum):
    lines = 'lines'


class FieldConfig3(BaseModel):
    fields: Dict[str, Fields1]
    type: Type5


class Strategy2(Enum):
    BEST_FIRST = 'BEST_FIRST'


class PostprocessConfig2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    strategy: Strategy2


class Strategy3(Enum):
    BEST_N_PAGES = 'BEST_N_PAGES'


class PostprocessConfig3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    parameters: Parameters
    strategy: Strategy3


class PreprocessConfig1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    autoRotate: bool
    imageQuality: ImageQuality
    maxPages: conint(ge=1, le=3)


class Model1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    createdBy: constr(max_length=4096)
    createdTime: constr(
        pattern=r'^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$'
    )
    description: constr(max_length=4096)
    fieldConfig: Dict[str, Union[FieldConfig2, FieldConfig3]]
    height: conint(ge=97, le=1921)
    metadata: Dict[str, Any]
    modelId: constr(pattern=r'^las:model:[a-z0-9-_]+$')
    name: constr(max_length=4096)
    numberOfDataBundles: conint(ge=0)
    numberOfRunningTrainings: conint(ge=0)
    organizationId: constr(pattern=r'^las:organization:[a-z0-9-_]+$')
    postprocessConfig: Optional[Union[PostprocessConfig2, PostprocessConfig3]] = None
    preprocessConfig: PreprocessConfig1
    status: Status4
    trainingId: constr(pattern=r'^las:model-training:[a-f0-9]{32}$')
    updatedBy: constr(max_length=4096)
    updatedTime: constr(
        pattern=r'^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$'
    )
    width: conint(ge=97, le=1921)


class Models(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    models: List[Model1]
    nextToken: constr(max_length=4096)


class Organization(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    clientId: Optional[constr(pattern=r'^[0-9a-z]+$')] = None
    deploymentsAllowed: Optional[Dict[str, Any]] = None
    deploymentsCreated: Optional[Dict[str, Any]] = None
    description: constr(max_length=4096)
    documentRetentionInDays: conint(ge=1)
    monthlyNumberOfActiveModelsUsed: conint(ge=0)
    monthlyNumberOfDataBundlesAllowed: conint(ge=0)
    monthlyNumberOfDataBundlesCreated: conint(ge=0)
    monthlyNumberOfDocumentsAllowed: conint(ge=0)
    monthlyNumberOfDocumentsCreated: conint(ge=0)
    monthlyNumberOfFieldPredictionsUsed: conint(ge=0)
    monthlyNumberOfGpuHoursUsed: confloat(ge=0.0)
    monthlyNumberOfModelDeploymentUnitsUsed: Optional[conint(ge=0)] = None
    monthlyNumberOfPredictionsAllowed: conint(ge=0)
    monthlyNumberOfPredictionsCreated: conint(ge=0)
    monthlyNumberOfTrainingsAllowed: conint(ge=0)
    monthlyNumberOfTrainingsCreated: conint(ge=0)
    monthlyNumberOfTransitionExecutionsAllowed: conint(ge=0)
    monthlyNumberOfTransitionExecutionsCreated: conint(ge=0)
    monthlyNumberOfWorkflowExecutionsAllowed: conint(ge=0)
    monthlyNumberOfWorkflowExecutionsCreated: conint(ge=0)
    monthlyUsageSummary: Dict[str, Any]
    name: constr(max_length=4096)
    numberOfAppClientsAllowed: conint(ge=0)
    numberOfAppClientsCreated: conint(ge=0)
    numberOfAssetsAllowed: conint(ge=0)
    numberOfAssetsCreated: conint(ge=0)
    numberOfDatasetsAllowed: Optional[conint(ge=0)] = None
    numberOfDatasetsCreated: Optional[conint(ge=0)] = None
    numberOfModelsAllowed: conint(ge=0)
    numberOfModelsCreated: conint(ge=0)
    numberOfSecretsAllowed: conint(ge=0)
    numberOfSecretsCreated: conint(ge=0)
    numberOfTransitionsAllowed: conint(ge=0)
    numberOfTransitionsCreated: conint(ge=0)
    numberOfUsersAllowed: conint(ge=0)
    numberOfUsersCreated: conint(ge=0)
    numberOfWorkflowsAllowed: conint(ge=0)
    numberOfWorkflowsCreated: conint(ge=0)
    organizationId: constr(pattern=r'^las:organization:[a-z0-9-_]+$')
    paymentMethodId: constr(pattern=r'^las:payment-method:[a-f0-9]{32}$')
    planId: constr(
        pattern=r'^(|las:organization:[a-z0-9-_]+/)las:plan:[a-z0-9-_]+(|:@[a-z0-9-_]+|:[0-9]+)$'
    )
    updatedBy: constr(max_length=4096)
    updatedTime: constr(
        pattern=r'^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$'
    )


class Organizations(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    nextToken: constr(max_length=4096)
    organizations: List[Organization]


class PatchAppClientId(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    defaultLoginUrl: Optional[constr(pattern=r'^http://localhost.*|^https://.*')] = None
    description: Optional[constr(max_length=4096)] = None
    loginUrls: Optional[List[constr(pattern=r'^http://localhost.*|^https://.*')]] = None
    name: Optional[constr(max_length=4096)] = None


class PatchAssetId(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    content: Optional[constr(min_length=1)] = None
    description: Optional[constr(max_length=4096)] = None
    name: Optional[constr(max_length=4096)] = None


class PatchDataBundleId(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    description: Optional[constr(max_length=4096)] = None
    name: Optional[constr(max_length=4096)] = None


class PatchDatasetId(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    containsPersonallyIdentifiableInformation: Optional[bool] = None
    description: Optional[constr(max_length=4096)] = None
    metadata: Optional[Dict[str, Any]] = None
    name: Optional[constr(max_length=4096)] = None
    retentionInDays: Optional[conint(ge=1)] = None


class Type6(Enum):
    amount = 'amount'
    date = 'date'
    digits = 'digits'
    enum = 'enum'
    numeric = 'numeric'
    string = 'string'


class FieldConfig4(BaseModel):
    description: Optional[constr(max_length=4096)] = None
    enum: Optional[List[EnumItem]] = Field(None, max_length=500, min_length=1)
    maxLength: Optional[conint(ge=1, le=512)] = None
    type: Type6


class Fields2(BaseModel):
    description: Optional[constr(max_length=4096)] = None
    enum: Optional[List[EnumItem]] = Field(None, max_length=500, min_length=1)
    maxLength: Optional[conint(ge=1, le=512)] = None
    type: Type6


class Type8(Enum):
    lines = 'lines'


class FieldConfig5(BaseModel):
    fields: Dict[str, Fields2]
    type: Type8


class Strategy4(Enum):
    BEST_FIRST = 'BEST_FIRST'


class PostprocessConfig4(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    strategy: Strategy4


class Strategy5(Enum):
    BEST_N_PAGES = 'BEST_N_PAGES'


class PostprocessConfig5(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    parameters: Parameters
    strategy: Strategy5


class PreprocessConfig2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    autoRotate: bool
    imageQuality: ImageQuality
    maxPages: conint(ge=1, le=3)


class PatchModelId(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    description: Optional[constr(max_length=4096)] = None
    fieldConfig: Optional[Dict[str, Union[FieldConfig4, FieldConfig5]]] = None
    height: Optional[conint(ge=97, le=1921)] = None
    metadata: Optional[Dict[str, Any]] = None
    name: Optional[constr(max_length=4096)] = None
    postprocessConfig: Optional[Union[PostprocessConfig4, PostprocessConfig5]] = None
    preprocessConfig: Optional[PreprocessConfig2] = None
    trainingId: Optional[constr(pattern=r'^las:model-training:[a-f0-9]{32}$')] = None
    width: Optional[conint(ge=97, le=1921)] = None


class PatchOrganizationId(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    description: Optional[constr(max_length=4096)] = None
    name: Optional[constr(max_length=4096)] = None
    paymentMethodId: Optional[constr(pattern=r'^las:payment-method:[a-f0-9]{32}$')] = (
        None
    )
    planId: Optional[
        constr(
            pattern=r'^(|las:organization:[a-z0-9-_]+/)las:plan:[a-z0-9-_]+(|:@[a-z0-9-_]+|:[0-9]+)$'
        )
    ] = None


class PatchPaymentMethodId(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    description: Optional[constr(max_length=4096)] = None
    name: Optional[constr(max_length=4096)] = None
    stripeSetupIntentSecret: Optional[constr(min_length=1)] = None


class PatchSecretId(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    data: Optional[Dict[str, Any]] = None
    description: Optional[constr(max_length=4096)] = None
    name: Optional[constr(max_length=4096)] = None


class Status6(Enum):
    cancelled = 'cancelled'


class PatchTrainingId(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    deploymentEnvironmentId: Optional[
        constr(
            pattern=r'^(|las:organization:[a-z0-9-_]+/)las:deployment-environment:[a-z0-9-_]+(|:@[a-z0-9-_]+|:[0-9]+)$'
        )
    ] = None
    description: Optional[constr(max_length=4096)] = None
    metadata: Optional[Dict[str, Any]] = None
    name: Optional[constr(max_length=4096)] = None
    status: Optional[Status6] = None


class Error1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    message: constr(max_length=4096)


class Status7(Enum):
    succeeded = 'succeeded'


class PatchTransistionExecutionId1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    error: Optional[Error1] = None
    output: Optional[Dict[str, Any]] = None
    startTime: Optional[
        constr(
            pattern=r'^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$'
        )
    ] = None
    status: Optional[Status7] = None


class Status8(Enum):
    failed = 'failed'
    rejected = 'rejected'
    retry = 'retry'


class PatchTransistionExecutionId2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    error: Optional[Error1] = None
    output: Optional[Dict[str, Any]] = None
    startTime: Optional[
        constr(
            pattern=r'^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$'
        )
    ] = None
    status: Optional[Status8] = None


class PatchTransistionExecutionId(
    RootModel[Union[PatchTransistionExecutionId1, PatchTransistionExecutionId2]]
):
    root: Union[PatchTransistionExecutionId1, PatchTransistionExecutionId2] = Field(
        ..., title='PATCH transitions/{transitionId}/executions/{executionId}'
    )


class Assets1(BaseModel):
    jsRemoteComponent: Optional[constr(pattern=r'^las:asset:[a-f0-9]{32}$')] = None


class Cpu(Enum):
    integer_256 = 256
    integer_512 = 512
    integer_1024 = 1024


class Memory(Enum):
    integer_512 = 512
    integer_1024 = 1024
    integer_2048 = 2048
    integer_4096 = 4096
    integer_8192 = 8192


class Parameters3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    cpu: Optional[Cpu] = None
    environment: Optional[Dict[str, str]] = None
    environmentSecrets: Optional[List[constr(pattern=r'^las:secret:[a-f0-9]{32}$')]] = (
        None
    )
    imageUrl: Optional[str] = None
    memory: Optional[Memory] = None
    secretId: Optional[constr(pattern=r'^las:secret:[a-f0-9]{32}$')] = None


class Parameters4(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    assets: Optional[Assets1] = None


class PatchTransitionId(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    assets: Optional[Assets1] = None
    description: Optional[constr(max_length=4096)] = None
    environment: Optional[Dict[str, str]] = None
    environmentSecrets: Optional[List[constr(pattern=r'^las:secret:[a-f0-9]{32}$')]] = (
        None
    )
    inputJsonSchema: Optional[Dict[str, Any]] = None
    name: Optional[constr(max_length=4096)] = None
    outputJsonSchema: Optional[Dict[str, Any]] = None
    parameters: Optional[Union[Parameters3, Parameters4]] = None


class PatchUserId(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    avatar: Optional[constr(max_length=131072)] = None
    metadata: Optional[Dict[str, Any]] = None
    name: Optional[constr(max_length=4096)] = None


class PatchWorkflowExecutionId(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    nextTransitionId: Union[
        constr(pattern=r'^las:transition:[a-f0-9]{32}$'),
        constr(pattern=r'^las:transition:commons-[0-9A-Za-z-]+$'),
    ]


class CompletedConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    environment: Optional[Dict[str, str]] = None
    environmentSecrets: Optional[List[constr(pattern=r'^las:secret:[a-f0-9]{32}$')]] = (
        None
    )
    imageUrl: str
    secretId: Optional[constr(pattern=r'^las:secret:[a-f0-9]{32}$')] = None


class ErrorConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    email: Optional[
        constr(
            pattern=r'^[A-Za-z0-9][-+._A-Za-z0-9]*@([-_.A-Za-z0-9]+\.)+[A-Za-z]{2,}$'
        )
    ] = None
    manualRetry: Optional[bool] = None


class PatchWorkflowId(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    completedConfig: Optional[CompletedConfig] = None
    description: Optional[constr(max_length=4096)] = None
    errorConfig: Optional[ErrorConfig] = None
    name: Optional[constr(max_length=4096)] = None


class PaymentMethod(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    createdBy: constr(max_length=4096)
    createdTime: constr(
        pattern=r'^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$'
    )
    description: constr(max_length=4096)
    details: Dict[str, Any]
    name: constr(max_length=4096)
    paymentMethodId: constr(pattern=r'^las:payment-method:[a-f0-9]{32}$')
    stripePublishableKey: Optional[constr(max_length=4096)] = None
    stripeSetupIntentSecret: Optional[constr(max_length=4096)] = None
    updatedBy: constr(max_length=4096)
    updatedTime: constr(
        pattern=r'^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$'
    )


class PaymentMethods(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    nextToken: constr(max_length=4096)
    paymentMethods: List[PaymentMethod]


class Currency(Enum):
    USD = 'USD'
    EUR = 'EUR'
    NOK = 'NOK'


class Plan(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    activeModels: Optional[Dict[str, Any]] = None
    available: bool
    currency: Currency
    description: Optional[constr(max_length=4096)] = None
    fieldPredictions: Optional[Dict[str, Any]] = None
    gpuHours: Optional[Dict[str, Any]] = None
    latest: conint(ge=1)
    license: Optional[Dict[str, Any]] = None
    modelDeploymentUnits: Optional[Dict[str, Any]] = None
    name: constr(max_length=4096)
    organizationId: constr(pattern=r'^las:organization:[a-z0-9-_]+$')
    planId: constr(pattern=r'^las:plan:[a-z0-9-_]+(|:@[a-z0-9-_]+|:[0-9]+)$')


class Plan1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    activeModels: Optional[Dict[str, Any]] = None
    available: bool
    currency: Currency
    description: Optional[constr(max_length=4096)] = None
    fieldPredictions: Optional[Dict[str, Any]] = None
    gpuHours: Optional[Dict[str, Any]] = None
    latest: conint(ge=1)
    license: Optional[Dict[str, Any]] = None
    modelDeploymentUnits: Optional[Dict[str, Any]] = None
    name: constr(max_length=4096)
    organizationId: constr(pattern=r'^las:organization:[a-z0-9-_]+$')
    planId: constr(pattern=r'^las:plan:[a-z0-9-_]+(|:@[a-z0-9-_]+|:[0-9]+)$')


class Plans(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    nextToken: constr(max_length=4096)
    plans: List[Plan1]


class PostAppClients(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    callbackUrls: Optional[List[constr(pattern=r'^http://localhost.*|^https://.*')]] = (
        None
    )
    defaultLoginUrl: Optional[constr(pattern=r'^http://localhost.*|^https://.*')] = None
    description: Optional[constr(max_length=4096)] = None
    generateSecret: Optional[bool] = True
    loginUrls: Optional[List[constr(pattern=r'^http://localhost.*|^https://.*')]] = None
    logoutUrls: Optional[List[constr(pattern=r'^http://localhost.*|^https://.*')]] = (
        None
    )
    name: Optional[constr(max_length=4096)] = None


class PostAssets(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    content: constr(min_length=1, max_length=6250000)
    description: Optional[constr(max_length=4096)] = None
    name: Optional[constr(max_length=4096)] = None


class DatasetId(RootModel[constr(pattern=r'^las:dataset:[a-f0-9]{32}$')]):
    root: constr(pattern=r'^las:dataset:[a-f0-9]{32}$')


class PostDataBundles(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    datasetIds: Optional[List[DatasetId]] = Field(None, min_length=1)
    description: Optional[constr(max_length=4096)] = None
    name: Optional[constr(max_length=4096)] = None


class PostDatasets(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    containsPersonallyIdentifiableInformation: Optional[bool] = None
    description: Optional[constr(max_length=4096)] = None
    metadata: Optional[Dict[str, Any]] = None
    name: Optional[constr(max_length=4096)] = None
    retentionInDays: Optional[conint(ge=1)] = None


class PostHeartbeats(BaseModel):
    pass


class Type9(Enum):
    amount = 'amount'
    date = 'date'
    digits = 'digits'
    enum = 'enum'
    numeric = 'numeric'
    string = 'string'


class FieldConfig6(BaseModel):
    description: Optional[constr(max_length=4096)] = None
    enum: Optional[List[EnumItem]] = Field(None, max_length=500, min_length=1)
    maxLength: Optional[conint(ge=1, le=512)] = None
    type: Type9


class Fields3(BaseModel):
    description: Optional[constr(max_length=4096)] = None
    enum: Optional[List[EnumItem]] = Field(None, max_length=500, min_length=1)
    maxLength: Optional[conint(ge=1, le=512)] = None
    type: Type9


class Type11(Enum):
    lines = 'lines'


class FieldConfig7(BaseModel):
    fields: Dict[str, Fields3]
    type: Type11


class Strategy6(Enum):
    BEST_FIRST = 'BEST_FIRST'


class PostprocessConfig6(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    strategy: Strategy6


class Parameters5(BaseModel):
    collapse: Optional[bool] = None
    n: conint(ge=1, le=3)


class Strategy7(Enum):
    BEST_N_PAGES = 'BEST_N_PAGES'


class PostprocessConfig7(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    parameters: Parameters5
    strategy: Strategy7


class PreprocessConfig3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    autoRotate: bool
    imageQuality: ImageQuality
    maxPages: conint(ge=1, le=3)


class PostModels(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    description: Optional[constr(max_length=4096)] = None
    fieldConfig: Dict[str, Union[FieldConfig6, FieldConfig7]]
    height: Optional[conint(ge=97, le=1921)] = None
    metadata: Optional[Dict[str, Any]] = None
    name: Optional[constr(max_length=4096)] = None
    postprocessConfig: Optional[Union[PostprocessConfig6, PostprocessConfig7]] = None
    preprocessConfig: Optional[PreprocessConfig3] = None
    width: Optional[conint(ge=97, le=1921)] = None


class PostOrganizations(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: Optional[constr(max_length=4096)] = None


class PostPaymentMethods(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    description: Optional[constr(max_length=4096)] = None
    name: Optional[constr(max_length=4096)] = None


class Strategy8(Enum):
    BEST_FIRST = 'BEST_FIRST'


class PostprocessConfig8(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    strategy: Strategy8


class Strategy9(Enum):
    BEST_N_PAGES = 'BEST_N_PAGES'


class PostprocessConfig9(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    parameters: Parameters5
    strategy: Strategy9


class Rotation(Enum):
    integer_0 = 0
    integer_90 = 90
    integer_180 = 180
    integer_270 = 270


class PostPredictions(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    autoRotate: Optional[bool] = None
    documentId: constr(pattern=r'^las:document:[a-f0-9]{32}$')
    imageQuality: Optional[ImageQuality] = None
    maxPages: Optional[conint(ge=1, le=3)] = None
    modelId: constr(pattern=r'^(|las:organization:[a-z0-9-_]+/)las:model:[a-z0-9-_]+$')
    postprocessConfig: Optional[Union[PostprocessConfig8, PostprocessConfig9]] = None
    rotation: Optional[Rotation] = None
    trainingId: Optional[constr(pattern=r'^las:model-training:[a-f0-9]{32}$')] = None


class PostSecrets(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    data: Dict[str, Any]
    description: Optional[constr(max_length=4096)] = None
    name: Optional[constr(max_length=4096)] = None


class PostSignUp(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        regex_engine="python-re",
    )
    email: constr(
        pattern=r'^[A-Za-z0-9][-+._A-Za-z0-9]*@([-_.A-Za-z0-9]+\.)+[A-Za-z]{2,}$'
    )
    name: Optional[constr(max_length=4096)] = None
    password: constr(
        pattern=r'^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[\^$*.\[\]{}\(\)?\-"!@#%&/,><\':;|_~`])\S{8,99}$'
    )
    reCaptchaResponse: str


class DataBundleId(RootModel[constr(pattern=r'^las:model-data-bundle:[a-f0-9]{32}$')]):
    root: constr(pattern=r'^las:model-data-bundle:[a-f0-9]{32}$')


class InstanceType(Enum):
    small_gpu = 'small-gpu'
    medium_gpu = 'medium-gpu'
    large_gpu = 'large-gpu'


class WarmStartConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    trainingId: constr(pattern=r'^las:model-training:[a-f0-9]{32}$')


class PostTrainings(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    dataBundleIds: Optional[List[DataBundleId]] = Field(None, min_length=1)
    dataScientistAssistance: Optional[bool] = None
    description: Optional[constr(max_length=4096)] = None
    instanceType: Optional[InstanceType] = None
    metadata: Optional[Dict[str, Any]] = None
    name: Optional[constr(max_length=4096)] = None
    warmStartConfig: Optional[WarmStartConfig] = None


class PostTransitionExecution(BaseModel):
    pass


class Parameters7(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    cpu: Optional[Cpu] = None
    environment: Optional[Dict[str, str]] = None
    environmentSecrets: Optional[List[constr(pattern=r'^las:secret:[a-f0-9]{32}$')]] = (
        None
    )
    imageUrl: str
    memory: Optional[Memory] = None
    secretId: Optional[constr(pattern=r'^las:secret:[a-f0-9]{32}$')] = None


class Parameters8(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    assets: Optional[Assets1] = None


class TransitionType(Enum):
    docker = 'docker'
    manual = 'manual'


class PostTransitions(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    description: Optional[constr(max_length=4096)] = None
    inputJsonSchema: Optional[Dict[str, Any]] = None
    name: Optional[constr(max_length=4096)] = None
    outputJsonSchema: Optional[Dict[str, Any]] = None
    parameters: Optional[Union[Parameters7, Parameters8]] = None
    timeoutInSeconds: Optional[conint(ge=60, le=1800)] = None
    transitionType: TransitionType


class PostUsers(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    appClientId: Optional[constr(pattern=r'^las:app-client:[a-z0-9-_]+$')] = None
    avatar: Optional[constr(max_length=131072)] = None
    email: constr(
        pattern=r'^[A-Za-z0-9][-+._A-Za-z0-9]*@([-_.A-Za-z0-9]+\.)+[A-Za-z]{2,}$'
    )
    metadata: Optional[Dict[str, Any]] = None
    name: Optional[constr(max_length=4096)] = None


class PostWorkflowExecutions(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    input: Dict[str, Any]


class Language(Enum):
    ASL = 'ASL'


class Version(Enum):
    field_1_0_0 = '1.0.0'


class Specification(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    definition: Dict[str, Any]
    language: Optional[Language] = None
    version: Optional[Version] = None


class PostWorkflows(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    completedConfig: Optional[CompletedConfig] = None
    description: Optional[constr(max_length=4096)] = None
    errorConfig: Optional[ErrorConfig] = None
    name: Optional[constr(max_length=4096)] = None
    specification: Specification


class LocationItem(RootModel[confloat(ge=0.0, le=1.0)]):
    root: confloat(ge=0.0, le=1.0)


class Predictions(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    confidence: confloat(ge=0.0, le=1.0)
    label: constr(pattern=r'^[0-9A-Za-z-_]+$', min_length=1, max_length=36)
    location: Optional[List[LocationItem]] = Field(None, max_length=4, min_length=4)
    page: Optional[conint(ge=0)] = None
    value: constr(min_length=1, max_length=512)


class ValueItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    confidence: confloat(ge=0.0, le=1.0)
    label: constr(pattern=r'^[0-9A-Za-z-_]+$', min_length=1, max_length=36)
    location: Optional[List[LocationItem]] = Field(None, max_length=4, min_length=4)
    page: Optional[conint(ge=0)] = None
    value: constr(min_length=1, max_length=512)


class Predictions1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    label: constr(pattern=r'^[0-9A-Za-z-_]+$', min_length=1, max_length=36)
    page: Optional[conint(ge=0)] = None
    value: List[List[ValueItem]]


class Prediction(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    createdBy: Optional[constr(max_length=4096)] = None
    createdTime: Optional[
        constr(
            pattern=r'^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$'
        )
    ] = None
    documentId: constr(pattern=r'^las:document:[a-f0-9]{32}$')
    inferenceTime: confloat(ge=0.0)
    modelId: constr(pattern=r'^(|las:organization:[a-z0-9-_]+/)las:model:[a-z0-9-_]+$')
    predictionId: constr(pattern=r'^las:prediction:[a-f0-9]{32}$')
    predictions: List[Union[Predictions, Predictions1]]
    trainingId: Optional[constr(pattern=r'^las:model-training:[a-f0-9]{32}$')] = None


class Predictions3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    confidence: confloat(ge=0.0, le=1.0)
    label: constr(pattern=r'^[0-9A-Za-z-_]+$', min_length=1, max_length=36)
    location: Optional[List[LocationItem]] = Field(None, max_length=4, min_length=4)
    page: Optional[conint(ge=0)] = None
    value: constr(min_length=1, max_length=512)


class ValueItem1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    confidence: confloat(ge=0.0, le=1.0)
    label: constr(pattern=r'^[0-9A-Za-z-_]+$', min_length=1, max_length=36)
    location: Optional[List[LocationItem]] = Field(None, max_length=4, min_length=4)
    page: Optional[conint(ge=0)] = None
    value: constr(min_length=1, max_length=512)


class Predictions4(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    label: constr(pattern=r'^[0-9A-Za-z-_]+$', min_length=1, max_length=36)
    page: Optional[conint(ge=0)] = None
    value: List[List[ValueItem1]]


class Prediction1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    createdBy: Optional[constr(max_length=4096)] = None
    createdTime: Optional[
        constr(
            pattern=r'^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$'
        )
    ] = None
    documentId: constr(pattern=r'^las:document:[a-f0-9]{32}$')
    inferenceTime: confloat(ge=0.0)
    modelId: constr(pattern=r'^(|las:organization:[a-z0-9-_]+/)las:model:[a-z0-9-_]+$')
    predictionId: constr(pattern=r'^las:prediction:[a-f0-9]{32}$')
    predictions: List[Union[Predictions3, Predictions4]]
    trainingId: Optional[constr(pattern=r'^las:model-training:[a-f0-9]{32}$')] = None


class Predictions2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    nextToken: constr(max_length=4096)
    order: Optional[Order] = None
    predictions: List[Prediction1]
    sortBy: Optional[SortBy] = None


class Profile(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    createdTime: Optional[
        constr(
            pattern=r'^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$'
        )
    ] = None
    email: Optional[
        constr(
            pattern=r'^[A-Za-z0-9][-+._A-Za-z0-9]*@([-_.A-Za-z0-9]+\.)+[A-Za-z]{2,}$'
        )
    ] = None
    familyName: Optional[constr(max_length=4096)] = None
    givenName: Optional[constr(max_length=4096)] = None
    locale: Optional[constr(max_length=4096)] = None
    metadata: Optional[Dict[str, Any]] = None
    name: Optional[constr(max_length=4096)] = None
    picture: Optional[constr(max_length=4096)] = None
    profileId: constr(pattern=r'^las:profile:[a-f0-9]{32}$')
    updatedTime: Optional[
        constr(
            pattern=r'^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$'
        )
    ] = None


class Secret(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    createdBy: constr(max_length=4096)
    createdTime: constr(
        pattern=r'^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$'
    )
    description: constr(max_length=4096)
    name: constr(max_length=4096)
    secretId: constr(pattern=r'^las:secret:[a-f0-9]{32}$')
    updatedBy: constr(max_length=4096)
    updatedTime: constr(
        pattern=r'^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$'
    )


class Secrets(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    nextToken: constr(max_length=4096)
    secrets: List[Secret]


class SignUp(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    clientId: str
    username: constr(
        pattern=r'^[A-Za-z0-9][-+._A-Za-z0-9]*@([-_.A-Za-z0-9]+\.)+[A-Za-z]{2,}$'
    )


class Status9(Enum):
    waiting_for_approval = 'waiting-for-approval'
    pending = 'pending'
    running = 'running'
    succeeded = 'succeeded'
    failed = 'failed'
    cancelled = 'cancelled'


class Training(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    createdBy: constr(max_length=4096)
    createdTime: constr(
        pattern=r'^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$'
    )
    dataBundleIds: List[constr(pattern=r'^las:model-data-bundle:[a-f0-9]{32}$')]
    dataScientistAssistance: Optional[bool] = None
    deploymentEnvironmentId: Optional[
        constr(
            pattern=r'^(|las:organization:[a-z0-9-_]+/)las:deployment-environment:[a-z0-9-_]+(|:@[a-z0-9-_]+|:[0-9]+)$'
        )
    ] = None
    description: constr(max_length=4096)
    evaluation: Dict[str, Any]
    gpuHours: confloat(ge=0.0)
    instanceType: InstanceType
    metadata: Dict[str, Any]
    modelId: constr(pattern=r'^las:model:[a-z0-9-_]+$')
    name: constr(max_length=4096)
    status: Status9
    trainingId: constr(pattern=r'^las:model-training:[a-f0-9]{32}$')
    updatedBy: constr(max_length=4096)
    updatedTime: constr(
        pattern=r'^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$'
    )
    warmStartConfig: Optional[Union[WarmStartConfig, Dict[str, Any]]] = None


class StatusEnum1(Enum):
    waiting_for_approval = 'waiting-for-approval'
    pending = 'pending'
    running = 'running'
    succeeded = 'succeeded'
    failed = 'failed'
    cancelled = 'cancelled'


class Training1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    createdBy: constr(max_length=4096)
    createdTime: constr(
        pattern=r'^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$'
    )
    dataBundleIds: List[constr(pattern=r'^las:model-data-bundle:[a-f0-9]{32}$')]
    dataScientistAssistance: Optional[bool] = None
    deploymentEnvironmentId: Optional[
        constr(
            pattern=r'^(|las:organization:[a-z0-9-_]+/)las:deployment-environment:[a-z0-9-_]+(|:@[a-z0-9-_]+|:[0-9]+)$'
        )
    ] = None
    description: constr(max_length=4096)
    evaluation: Dict[str, Any]
    gpuHours: confloat(ge=0.0)
    instanceType: InstanceType
    metadata: Dict[str, Any]
    modelId: constr(pattern=r'^las:model:[a-z0-9-_]+$')
    name: constr(max_length=4096)
    status: Status9
    trainingId: constr(pattern=r'^las:model-training:[a-f0-9]{32}$')
    updatedBy: constr(max_length=4096)
    updatedTime: constr(
        pattern=r'^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$'
    )
    warmStartConfig: Optional[Union[WarmStartConfig, Dict[str, Any]]] = None


class Trainings(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    nextToken: constr(max_length=4096)
    status: Optional[List[StatusEnum1]] = None
    trainings: List[Training1]


class Transition(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    assets: Optional[Assets1] = None
    createdBy: constr(max_length=4096)
    createdTime: constr(
        pattern=r'^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$'
    )
    description: constr(max_length=4096)
    inputJsonSchema: Optional[Dict[str, Any]] = None
    name: constr(max_length=4096)
    outputJsonSchema: Optional[Dict[str, Any]] = None
    parameters: Dict[str, Any]
    timeoutInSeconds: conint(ge=60, le=1800)
    transitionId: Union[
        constr(pattern=r'^las:transition:[a-f0-9]{32}$'),
        constr(pattern=r'^las:transition:commons-[0-9A-Za-z-]+$'),
    ]
    transitionType: TransitionType
    updatedBy: constr(max_length=4096)
    updatedTime: constr(
        pattern=r'^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$'
    )


class Status11(Enum):
    running = 'running'
    succeeded = 'succeeded'
    failed = 'failed'
    rejected = 'rejected'
    retry = 'retry'


class TransitionExecution(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    completedBy: constr(max_length=4096)
    endTime: Optional[
        constr(
            pattern=r'^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$'
        )
    ] = None
    executionId: constr(pattern=r'^las:transition-execution:[a-f0-9]{32}$')
    input: Dict[str, Any]
    logId: Optional[constr(pattern=r'^las:log:[a-f0-9]{32}$')] = None
    startTime: Optional[
        constr(
            pattern=r'^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$'
        )
    ] = None
    status: Status11
    transitionId: Union[
        constr(pattern=r'^las:transition:[a-f0-9]{32}$'),
        constr(pattern=r'^las:transition:commons-[0-9A-Za-z-]+$'),
    ]


class Execution(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    completedBy: constr(max_length=4096)
    endTime: Optional[
        constr(
            pattern=r'^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$'
        )
    ] = None
    executionId: constr(pattern=r'^las:transition-execution:[a-f0-9]{32}$')
    input: Dict[str, Any]
    logId: Optional[constr(pattern=r'^las:log:[a-f0-9]{32}$')] = None
    startTime: Optional[
        constr(
            pattern=r'^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$'
        )
    ] = None
    status: Status11
    transitionId: Union[
        constr(pattern=r'^las:transition:[a-f0-9]{32}$'),
        constr(pattern=r'^las:transition:commons-[0-9A-Za-z-]+$'),
    ]


class StatusEnum2(Enum):
    running = 'running'
    succeeded = 'succeeded'
    failed = 'failed'
    rejected = 'rejected'
    retry = 'retry'


class TransitionExecutions(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    executions: List[Execution]
    nextToken: constr(max_length=4096)
    status: Optional[List[StatusEnum2]] = None
    transitionId: Union[
        constr(pattern=r'^las:transition:[a-f0-9]{32}$'),
        constr(pattern=r'^las:transition:commons-[0-9A-Za-z-]+$'),
    ]


class TransitionTypeEnum(Enum):
    docker = 'docker'
    manual = 'manual'


class Transition1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    assets: Optional[Assets1] = None
    createdBy: constr(max_length=4096)
    createdTime: constr(
        pattern=r'^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$'
    )
    description: constr(max_length=4096)
    inputJsonSchema: Optional[Dict[str, Any]] = None
    name: constr(max_length=4096)
    outputJsonSchema: Optional[Dict[str, Any]] = None
    parameters: Dict[str, Any]
    timeoutInSeconds: conint(ge=60, le=1800)
    transitionId: Union[
        constr(pattern=r'^las:transition:[a-f0-9]{32}$'),
        constr(pattern=r'^las:transition:commons-[0-9A-Za-z-]+$'),
    ]
    transitionType: TransitionType
    updatedBy: constr(max_length=4096)
    updatedTime: constr(
        pattern=r'^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$'
    )


class Transitions(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    nextToken: constr(max_length=4096)
    transitionType: Optional[List[TransitionTypeEnum]] = None
    transitions: List[Transition1]


class User(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    avatar: Optional[constr(max_length=131072)] = None
    createdBy: constr(max_length=4096)
    createdTime: constr(
        pattern=r'^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$'
    )
    email: constr(
        pattern=r'^[A-Za-z0-9][-+._A-Za-z0-9]*@([-_.A-Za-z0-9]+\.)+[A-Za-z]{2,}$'
    )
    metadata: Optional[Dict[str, Any]] = None
    name: Optional[constr(max_length=4096)] = None
    profileId: Optional[constr(pattern=r'^las:profile:[a-f0-9]{32}$')] = None
    updatedBy: constr(max_length=4096)
    updatedTime: constr(
        pattern=r'^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$'
    )
    userId: constr(pattern=r'^las:user:[a-f0-9]{32}$')


class Users(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    nextToken: constr(max_length=4096)
    users: List[User]


class Workflow(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    completedConfig: CompletedConfig
    createdBy: constr(max_length=4096)
    createdTime: constr(
        pattern=r'^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$'
    )
    description: constr(max_length=4096)
    errorConfig: ErrorConfig
    name: constr(max_length=4096)
    numberOfRunningExecutions: int
    updatedBy: constr(max_length=4096)
    updatedTime: constr(
        pattern=r'^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$'
    )
    workflowId: constr(pattern=r'^las:workflow:[a-f0-9]{32}$')


class Status13(Enum):
    running = 'running'
    succeeded = 'succeeded'
    failed = 'failed'
    rejected = 'rejected'
    retry = 'retry'
    error = 'error'


class WorkflowExecution(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    completedBy: Optional[
        List[
            Union[
                constr(pattern=r'^las:user:[a-f0-9]{32}$'),
                constr(pattern=r'^las:app-client:[a-z0-9-_]+$'),
            ]
        ]
    ] = None
    completedTaskLogId: Optional[constr(pattern=r'^las:log:[a-f0-9]{32}$')] = None
    endTime: constr(
        pattern=r'^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$'
    )
    events: Optional[List[Dict[str, Any]]] = None
    executionId: constr(pattern=r'^las:workflow-execution:[a-f0-9]{32}$')
    input: Dict[str, Any]
    logId: Optional[constr(pattern=r'^las:log:[a-f0-9]{32}$')] = None
    output: Dict[str, Any]
    startTime: constr(
        pattern=r'^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$'
    )
    status: Status13
    transitionExecutions: Dict[str, Any]
    workflowId: constr(pattern=r'^las:workflow:[a-f0-9]{32}$')


class Execution1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    completedBy: Optional[
        List[
            Union[
                constr(pattern=r'^las:user:[a-f0-9]{32}$'),
                constr(pattern=r'^las:app-client:[a-z0-9-_]+$'),
            ]
        ]
    ] = None
    completedTaskLogId: Optional[constr(pattern=r'^las:log:[a-f0-9]{32}$')] = None
    endTime: constr(
        pattern=r'^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$'
    )
    events: Optional[List[Dict[str, Any]]] = None
    executionId: constr(pattern=r'^las:workflow-execution:[a-f0-9]{32}$')
    input: Dict[str, Any]
    logId: Optional[constr(pattern=r'^las:log:[a-f0-9]{32}$')] = None
    output: Dict[str, Any]
    startTime: constr(
        pattern=r'^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$'
    )
    status: Status13
    transitionExecutions: Dict[str, Any]
    workflowId: constr(pattern=r'^las:workflow:[a-f0-9]{32}$')


class SortBy2(Enum):
    startTime = 'startTime'
    endTime = 'endTime'


class StatusEnum3(Enum):
    running = 'running'
    succeeded = 'succeeded'
    failed = 'failed'
    rejected = 'rejected'
    retry = 'retry'
    error = 'error'


class WorkflowExecutions(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    executions: List[Execution1]
    nextToken: constr(max_length=4096)
    order: Optional[Order] = None
    sortBy: Optional[SortBy2] = None
    status: Optional[List[StatusEnum3]] = None
    workflowId: constr(pattern=r'^las:workflow:[a-f0-9]{32}$')


class Workflow1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    completedConfig: CompletedConfig
    createdBy: constr(max_length=4096)
    createdTime: constr(
        pattern=r'^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$'
    )
    description: constr(max_length=4096)
    errorConfig: ErrorConfig
    name: constr(max_length=4096)
    numberOfRunningExecutions: int
    updatedBy: constr(max_length=4096)
    updatedTime: constr(
        pattern=r'^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$'
    )
    workflowId: constr(pattern=r'^las:workflow:[a-f0-9]{32}$')


class Workflows(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    nextToken: constr(max_length=4096)
    workflows: List[Workflow1]


class GroundTruthItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    label: constr(pattern=r'^[0-9A-Za-z-_]+$', min_length=1, max_length=36)
    value: Union[constr(min_length=0, max_length=512), bool, float, GroundTruthList]


class Document(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    consentId: Optional[constr(pattern=r'^las:consent:[a-f0-9]{32}$')] = None
    content: Optional[constr(min_length=1)] = None
    contentMD5: constr(max_length=4096)
    contentType: ContentType
    createdBy: constr(max_length=4096)
    createdTime: constr(
        pattern=r'^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$'
    )
    datasetId: Optional[constr(pattern=r'^las:dataset:[a-f0-9]{32}$')] = None
    description: constr(max_length=4096)
    documentId: constr(pattern=r'^las:document:[a-f0-9]{32}$')
    groundTruth: Optional[List[GroundTruthItem]] = None
    metadata: Dict[str, Any]
    name: constr(max_length=4096)
    retentionInDays: conint(ge=1)
    updatedBy: constr(max_length=4096)
    updatedTime: constr(
        pattern=r'^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$'
    )


class Document1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    consentId: Optional[constr(pattern=r'^las:consent:[a-f0-9]{32}$')] = None
    content: Optional[constr(min_length=1)] = None
    contentMD5: constr(max_length=4096)
    contentType: ContentType
    createdBy: constr(max_length=4096)
    createdTime: constr(
        pattern=r'^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$'
    )
    datasetId: Optional[constr(pattern=r'^las:dataset:[a-f0-9]{32}$')] = None
    description: constr(max_length=4096)
    documentId: constr(pattern=r'^las:document:[a-f0-9]{32}$')
    groundTruth: Optional[List[GroundTruthItem]] = None
    metadata: Dict[str, Any]
    name: constr(max_length=4096)
    retentionInDays: conint(ge=1)
    updatedBy: constr(max_length=4096)
    updatedTime: constr(
        pattern=r'^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$'
    )


class Documents(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    consentId: Optional[List[constr(pattern=r'^las:consent:[a-f0-9]{32}$')]] = None
    datasetId: Optional[List[constr(pattern=r'^las:dataset:[a-f0-9]{32}$')]] = None
    documents: List[Document1]
    nextToken: constr(max_length=4096)
    order: Optional[Order] = None
    sortBy: Optional[SortBy] = None


class PatchDocumentId(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    datasetId: Optional[constr(pattern=r'^las:dataset:[a-f0-9]{32}$')] = None
    description: Optional[constr(max_length=4096)] = None
    groundTruth: Optional[List[GroundTruthItem]] = None
    metadata: Optional[Dict[str, Any]] = None
    name: Optional[constr(max_length=4096)] = None
    retentionInDays: Optional[conint(ge=1)] = None


class PostDocuments(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    consentId: Optional[constr(pattern=r'^las:consent:[a-f0-9]{32}$')] = None
    content: constr(min_length=1, max_length=6250000)
    contentType: ContentType
    datasetId: Optional[constr(pattern=r'^las:dataset:[a-f0-9]{32}$')] = None
    description: Optional[constr(max_length=4096)] = None
    groundTruth: Optional[List[GroundTruthItem]] = None
    metadata: Optional[Dict[str, Any]] = None
    name: Optional[constr(max_length=4096)] = None
    retentionInDays: Optional[conint(ge=1)] = None


class GroundTruthListItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    label: constr(pattern=r'^[0-9A-Za-z-_]+$', min_length=1, max_length=36)
    value: Union[
        constr(min_length=0, max_length=512), Any, bool, float, GroundTruthList
    ]


class GroundTruthList(
    RootModel[Union[List[GroundTruthListItem], List[List[GroundTruthListItem]]]]
):
    root: Union[List[GroundTruthListItem], List[List[GroundTruthListItem]]]


GroundTruthItem.model_rebuild()
GroundTruthListItem.model_rebuild()
